#!/bin/bash
# Copyright 2015 Mellanox Technologies, Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

readonly LOG_FILE=/var/log/reboot_bootstrap_nodes.log

usage() {
  echo "Usage: `basename $0` <-e environment_id|-h|-a>"
  echo "    This script is used to reboot nodes in 'discover' status, of the given environment."
  echo "    If -e environment given, discovered of the environment given as value will be rebooted."
  echo "    If -a environment given, all discovered nodes will be rebooted."
  exit 0
}

log() {
  echo $1 | tee -a $LOG_FILE
}

while getopts "e:ha" opt; do
  case $opt in
    a)
      env=''
      log "Starting reboot cycle on env ${OPTARG} at `date`"
      ;;
    h)
      usage
      ;;
    e)
      env="--env ${OPTARG}"
      log "Starting reboot cycle on env ${OPTARG} at `date`"
      ;;
    \?)
      echo "Invalid usage"
      exit 1
  esac
done
if [ $OPTIND -eq 1 ]; then usage; fi
shift $((OPTIND-1))

tmpjson=`mktemp`
trap "\rm -f $tmpjson; exit 1" SIGINT SIGTERM

fuel node $env --json > $tmpjson
ips=`python -c "import json;print '\n'.join([str(i['ip']) for i in json.load(open('$tmpjson')) if i['status'] == 'discover'])"`
log "Rebooting nodes with IPs $ips"
for ip in $ips;
do
 id=`python -c "import json;print '\n'.join([str(i['id']) for i in json.load(open('$tmpjson')) if i['ip'] == '$ip'])"`
 ping -c 2 $ip > /dev/null
 if [ $? -eq 0 ];then
   ssh $ip -o BatchMode=yes -o StrictHostKeyChecking=no reboot &> /dev/null
   trials=10
   log "waiting for node-$id to go offline."
   while ping -c 2 $ip > /dev/null && [ $trials -ne 0 ];do
     ((trials=$trials-1))
     sleep 1;
   done
   if [ $trials -eq 0 ];then
     log "node-$id reboot failed."
   else
     log "node-$id reboot succeeded. please wait for it to boot again."
   fi
 else
   log "node-$id is already offline. please wait a few minutes or verify it is powered on."
 fi
done

\rm -f $tmpjson
